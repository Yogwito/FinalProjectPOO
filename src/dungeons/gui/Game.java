package dungeons.gui;

import java.awt.Graphics;
import java.awt.event.KeyEvent;
import Class.Dungeon;
import java.awt.Image;
import java.util.Timer;
import java.util.TimerTask;

/**
 * La clase Game representa el estado del juego y se encarga de la lógica principal del juego.
 * Implementa la interfaz Drawable, lo que significa que puede ser dibujada en una interfaz gráfica.
 *
 * @author Santiago Jiménez
 * @author Daniel Felipe Lopez
 * @version 1.0.2
 */
public class Game 
        extends javax.swing.JFrame 
        implements Drawable {
    /**
     * El mapa del juego
     */
    private final Dungeon map;

    /**
     *  La imagen fuera de pantalla utilizada para el doble buffering
     */
    private Image offScreenImage;

    /**
     * Los gráficos fuera de pantalla utilizados para el doble buffering
     */
    private Graphics offScreenGraphics;

    /**
     * Constructor de la clase Game.
     * Inicializa los componentes de la interfaz de usuario y establece el mapa del juego.
     * También inicia un temporizador que actualiza la puntuación y redibuja el mapa cada segundo.
     *
     * @param map El mapa del juego.
     */
    public Game(Dungeon map) {
        initComponents();
        this.map = map;
        this.setVisible(true); 
        Timer timer = new Timer(true);
        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                map.setScore();
                map.redraw();// Llama al método setScore cada segundo
                if(!map.isActive()) {  
                    dispose();
                    
                 }
                 
            }
        }, 1000, 1000);
    }

    /**
     * Este método se utiliza para actualizar la pantalla del juego.
     * Llama al método paint para redibujar la pantalla.
     * @param g Los gráficos en los que se dibuja.
     */
    public void update(Graphics g) {
        paint(g);
    }
    
    /**
     * Este método se utiliza para dibujar la pantalla del juego.
     * Utiliza un enfoque de doble buffering para evitar el parpadeo.
     * @param g Los gráficos en los que se dibuja.
     */
    @Override
    public void paint(Graphics g) {
    if (offScreenImage == null) {
        offScreenImage = createImage(getWidth(), getHeight());
        offScreenGraphics = offScreenImage.getGraphics();
    }

        // Clear the off-screen image
        offScreenGraphics.setColor(getBackground());
        offScreenGraphics.fillRect(0, 0, getWidth(), getHeight());

        // Draw on the off-screen image
        map.draw(offScreenGraphics);  // Draw the dungeon
        // Copy the off-screen image to the screen
        g.drawImage(offScreenImage, 0, 0, this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        Jvida = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 591, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 494, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        Jvida.setBackground(new java.awt.Color(153, 153, 153));
        Jvida.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 12)); // NOI18N
        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(250, 250, 250)
                .addComponent(Jvida, javax.swing.GroupLayout.DEFAULT_SIZE, 408, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(315, 315, 315)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(365, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(561, Short.MAX_VALUE)
                .addComponent(Jvida, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if (map.isActive() == false){
            MenuPrincipal menu = new MenuPrincipal();
            menu.setSize(587, 492);
            menu.setVisible(true);
            this.setVisible(false); 
        }
        map.actKnight(evt.getKeyCode());
    }//GEN-LAST:event_formKeyPressed

    /**
     *
     */
    @Override
    public void redraw() {
        repaint();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Jvida;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
